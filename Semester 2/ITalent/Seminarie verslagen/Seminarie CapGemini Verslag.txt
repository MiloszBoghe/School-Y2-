Hij is begonnen over een verhaal over het bedrijf Shadow Inc. Dit bedrijf ontwikkelde een app voor de stemming in Iowa.
Deze app werd ontwikkeld op 3 maanden tijd maar uiteindelijk bleek dat deze app niet voldoende getest is, waardoor er veel problemen ontstaan zijn en er een grote vertraging was op de stemtelling.
Dit is dan in de krant gekomen en dit bedrijf heeft zware schade aan zijn reputatie gekregen. 1 van de grote fouten was een gebrek aan stress testing. Toen de app live ging en alle automaten tegelijk data moesten versturen, 
was dit teveel en konden de servers het niet aan. Hier heeft de app slecht op gereageerd.

"More than ever the success or failure of IT is existential to organisations."

"Complexity of IT on the rise" --> We zijn al zo lang bezig met testen maar nog steeds kunnen we niet vanaf de eerste keer zonder problemen een applicatie maken. Sterker nog, het gebeurt vaker dan ooit dat het misgaat.
Dit komt omdat systemen meer geavanceerd en dus meer complex worden en er meer kan fout gaan dan vroeger. Verder is er ook een probleem met samenwerking van systemen en miscommunicatie.
Er heerst ook een cultuur van "short time to market." --> Het wordt nu verwacht dat een applicatie heel snel gepubliceerd wordt. Vroeger waren de verwachtingen lager en was er meer tijd om goed alles te controleren.
Nu wil de klant zo snel mogelijk zijn applicatie ontvangen en dit zorgt voor fouten die veroorzaakt worden door te snel te moeten werken. 

Er zijn ook nieuwe partijen die zich mengen met IT. Dit noemde hij "citizens in IT". Dit gaat om mensen die eigenlijk zonder opleiding of enige kennis, denken dat ze geld kunnen verdienen met werk te zoeken in de IT sector.
Soms geraken deze mensen binnen maar omdat hun IT vaardigheden van heel lage kwaliteit of onbestaand zijn, gaat er uiteraard veel mis, en dit is niet altijd onmiddelijk duidelijk.

Hij heeft ook gepraat over wat de CEO's nu willen van testers. Vroeger was dit antwoord gemakkelijk: "zoek de bugs".
Tegenwoordig is dit lang niet meer genoeg. Nu geven ze vage antwoorden zoals: "Zorg dat de klant blij is", "Zorg dat je bijdraagt aan het bedrijf".
Deze antwoorden zijn niet duidelijk. 

Tegenwoordig wordt vaak gewerkt met de agile-scrum methodologie. Hier heb je sprints van een paar weken en dan moet er een onderdeel af zijn dat je kan laten zien.
Het hele idee erachter is dat je op korte tijd veel voortgang kan maken en de klant ook kan laten zien hoe het gaat. Maar er is één probleem: testing. 
Op zo een korte tijd is het bijna niet realiseerbaar om elk onderdeel voldoende te kunnen testen. Maar hiervoor hebben we dus DevOps Continuous Testing.
DevOps zorgt voor continuous integration, continuous delivery en het uiteindelijke doel is continuous deployment. 
Het begint bij continuous integration, alles zal geüpload worden op een versiebeheersysteem en moet manueel getest worden.
De volgende stap is continuous delivery. Dit is hetzelfde als continuous integration behalve dat het niet meer manueel getest moet worden. Testen draaien automatisch op de code die geüpload wordt.
Zo kan er in de avond geüpload worden en de volgende dag als ze gaan kijken , kunnen ze kijken wat er misgegaan is en vervolgens werken om dit op te lossen.
Het uiteindelijke doel is echter continuous deployment. Hierbij gaan we nog een stapje verder en hangt alles volledig af van de code. Er wordt niet meer manueel gechecked.


- Dark releases
- Canary releases
- A/B testing
- Monitoring & fast backout --> testen nog heel weinig. Ze kijken gewoon naar de statistieken. Ze hebben ongeveer een gemiddelde van bijvoorbeeld hoeveel mensen aanmelden, als ze dan een release doen en ze zien dat dit getal ineens
  veel lager ligt, weten ze dat er waarschijnlijk iets mis is, en dan draaien ze dit terug en lossen ze het op.

Deliberate breaking --> 

Deze tests worden vooraf geschreven en aan de developers gegeven. Deze testen zeggen dus eigenlijk: "bouw iets dat dit resultaat geeft". Zo kan de developer makkelijker tewerk gaan en weet hij ook meteen aan de hand 
van de tests of zijn applicatie correct werkt. Dit zorgt er dus voor dat alle applicaties die ontwikkeld worden eigenlijk continu getest worden , waardoor er veel minder fouten zijn in het eindproduct.

Hij heeft het ook gehad over AI die het maken van testen automatiseerd. Zo kan je heel makkelijk zeggen wat er moet gebeuren en de testen zullen automatisch geschreven worden.
Dit alles geldt voor testen op normale applicaties. Maar tegenwoordig is AI in de opkomst en dit moet ook getest worden.
Maar een AI testen is veel moeilijker. Bij een applicatie weet je wat je moet verwachten dus kan je makkelijk hierop testen. Een AI leert echter zelf dingen doen en is dus onvoorspelbaar. Hierdoor is het moeilijk te testen 
op de traditionele manier en hebben we een nieuwe strategie nodig om AI's te kunnen testen.

Na deze presentatie heeft iemand anders nog een presentatie gegeven specifiek over unit testing. Unit testen zorgen er voor dat fouten in code zo snel mogelijk gevonden worden. Om unit testen te schrijven delen we het best 
op in 3 delen: Arrange, Act, Assert.
Bij arrange zorg je er voor dat je alle elementen die je nodig hebt om de test uit te voeren al aanmaakt.
Bij act voer je de test uit en bij assert controleer je de restultaten.

Hij heeft het ook gehad over de conventies van benamingen van testen. Hier beginnen we best met de methode om te testen, volgend door wat er gaat gebeuren in de methode en het verwachte resultaat van deze methode.
Als je een test schrijft om te kijken of 1+2 gelijk is aan 3 noem je hem bijvoorbeeld: "Addition_1and2_Result3". Zo weet je onmiddelijk wat er aan de hand is met de test en als er iets fout gaat, is het gemakkelijk terug te vinden.




RT---------------------
R: 
Zelf heb ik ook al ervaring met unit testing. We hebben in onze oefeningen vaak unit testen gekregen van de lectors om makkelijker te werk te gaan en zelf te controleren of we juist bezig zijn.
We hebben ook al in verschillende talen geleerd om zelf testen te schrijven. We zijn begonnen met dit in C# te doen, maar we hebben het ondertussen ook al in Java geleerd en in het 2de semester van het 2de jaar bij web advanced 
hebben we ook geleerd om dit in Javascript te doen. 
